# ==============================================================
# = Data Source
# ==============================================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ============== Localhost ===================
spring.datasource.url = jdbc:mysql://localhost:3306/pathos?useSSL=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = sfg6Sd?G86bx864

# ============== ahto ===================
#spring.datasource.url = jdbc:mysql://ahto.epsevg.upc.edu:3306/est_e3185003
#spring.datasource.username = est_e3185003
#spring.datasource.password = dbe3185003

# ============== Pivotal ===================
#spring.datasource.url = jdbc:mysql://us-cdbr-iron-east-02.cleardb.net:3306/ad_491af7ca07314be
#spring.datasource.username = b711c4705c008c
#spring.datasource.password = a993945f

# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true

# ==============================================================
# = Hibernate ddl auto (create, create-drop, update)
# ==============================================================
spring.jpa.hibernate.ddl-auto = update

# ==============================================================
# = The SQL dialect makes Hibernate generate better SQL for the chosen database
# ==============================================================
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=?
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

# ==============================================================
# = Initialize the database using data.sql script
# ==============================================================
spring.datasource.initialization-mode=always